{"version":3,"sources":["template_resolver_mock_spec.js"],"names":[],"mappings":"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","file":"/home/korchev/github/angular/modules/angular2/test/mock/template_resolver_mock_spec.js","sourcesContent":["import {\n  beforeEach,\n  ddescribe,\n  describe,\n  el,\n  expect,\n  iit,\n  it,\n} from 'angular2/test_lib';\n\nimport {MockTemplateResolver} from 'angular2/src/mock/template_resolver_mock';\n\nimport {Component} from 'angular2/src/core/annotations/annotations';\nimport {Template} from 'angular2/src/core/annotations/template';\n\nimport {isBlank} from 'angular2/src/facade/lang';\n\nexport function main() {\n  describe('MockTemplateResolver', () => {\n    var resolver;\n\n    beforeEach(() => {\n      resolver = new MockTemplateResolver();\n    });\n\n    describe('Template overriding', () => {\n      it('should fallback to the default TemplateResolver when templates are not overridden', () => {\n        var template = resolver.resolve(SomeComponent);\n        expect(template.inline).toEqual('template');\n        expect(template.directives).toEqual([SomeDirective]);\n      });\n\n      it('should allow overriding a template', () => {\n        resolver.setTemplate(SomeComponent, new Template({inline: 'overridden template'}));\n        var template = resolver.resolve(SomeComponent);\n        expect(template.inline).toEqual('overridden template');\n        expect(isBlank(template.directives)).toBe(true);\n\n      });\n\n      it('should not allow overriding a template after it has been resolved', () => {\n        resolver.resolve(SomeComponent);\n        expect(() => {\n          resolver.setTemplate(SomeComponent, new Template({inline: 'overridden template'}));\n        }).toThrowError('The component SomeComponent has already been compiled, its configuration can not be changed');\n      });\n    });\n\n    describe('inline definition overriding', () => {\n      it('should allow overriding the default Template', () => {\n        resolver.setInlineTemplate(SomeComponent, 'overridden template');\n        var template = resolver.resolve(SomeComponent);\n        expect(template.inline).toEqual('overridden template');\n        expect(template.directives).toEqual([SomeDirective]);\n      });\n\n      it('should allow overriding an overriden template', () => {\n        resolver.setTemplate(SomeComponent, new Template({inline: 'overridden template'}));\n        resolver.setInlineTemplate(SomeComponent, 'overridden template x 2');\n        var template = resolver.resolve(SomeComponent);\n        expect(template.inline).toEqual('overridden template x 2');\n      });\n\n      it('should not allow overriding a template after it has been resolved', () => {\n        resolver.resolve(SomeComponent);\n        expect(() => {\n          resolver.setInlineTemplate(SomeComponent, 'overridden template');\n        }).toThrowError('The component SomeComponent has already been compiled, its configuration can not be changed');\n      });\n    });\n\n\n    describe('Directive overriding', () => {\n      it('should allow overriding a directive from the default template', () => {\n        resolver.overrideTemplateDirective(SomeComponent, SomeDirective, SomeOtherDirective);\n        var template = resolver.resolve(SomeComponent);\n        expect(template.directives.length).toEqual(1);\n        expect(template.directives[0]).toBe(SomeOtherDirective);\n      });\n\n      it('should allow overriding a directive from an overriden template', () => {\n        resolver.setTemplate(SomeComponent, new Template({directives: [SomeOtherDirective]}));\n        resolver.overrideTemplateDirective(SomeComponent, SomeOtherDirective, SomeComponent);\n        var template = resolver.resolve(SomeComponent);\n        expect(template.directives.length).toEqual(1);\n        expect(template.directives[0]).toBe(SomeComponent);\n      });\n\n      it('should throw when the overridden directive is not present', () => {\n        resolver.overrideTemplateDirective(SomeComponent, SomeOtherDirective, SomeDirective);\n        expect(() => { resolver.resolve(SomeComponent); })\n            .toThrowError('Overriden directive SomeOtherDirective not found in the template of SomeComponent');\n      });\n\n      it('should not allow overriding a directive after its template has been resolved', () => {\n        resolver.resolve(SomeComponent);\n        expect(() => {\n          resolver.overrideTemplateDirective(SomeComponent, SomeDirective, SomeOtherDirective);\n        }).toThrowError('The component SomeComponent has already been compiled, its configuration can not be changed');\n      });\n    });\n  });\n}\n\n@Component({selector: 'cmp'})\n@Template({\n  inline: 'template',\n  directives: [SomeDirective],\n})\nclass SomeComponent {\n}\n\nclass SomeDirective {\n}\n\nclass SomeOtherDirective {\n}\n"]}