{"version":3,"sources":["api.js"],"names":[],"mappings":"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","file":"/home/korchev/github/angular/modules/angular2/src/render/api.js","sourcesContent":["import {isPresent} from 'angular2/src/facade/lang';\nimport {Promise} from 'angular2/src/facade/async';\nimport {List, Map} from 'angular2/src/facade/collection';\nimport {ASTWithSource} from 'angular2/change_detection';\n\n/**\n * General notes:\n * We are already parsing expressions on the render side:\n * - this makes the ElementBinders more compact\n *   (e.g. no need to distinguish interpolations from regular expressions from literals)\n * - allows to retrieve which properties should be accessed from the event\n *   by looking at the expression\n * - we need the parse at least for the `template` attribute to match\n *   directives in it\n * - render compiler is not on the critical path as\n *   its output will be stored in precompiled templates.\n */\nexport class ElementBinder {\n  index:number;\n  parentIndex:number;\n  distanceToParent:number;\n  directives:List<DirectiveBinder>;\n  nestedProtoView:ProtoView;\n  propertyBindings: Map<string, ASTWithSource>;\n  variableBindings: Map<string, ASTWithSource>;\n  // Note: this contains a preprocessed AST\n  // that replaced the values that should be extracted from the element\n  // with a local name\n  eventBindings: Map<string, ASTWithSource>;\n  textBindings: List<ASTWithSource>;\n  readAttributes: Map<string, string>;\n\n  constructor({\n    index, parentIndex, distanceToParent,\n    directives, nestedProtoView,\n    propertyBindings, variableBindings,\n    eventBindings, textBindings,\n    readAttributes\n  }) {\n    this.index = index;\n    this.parentIndex = parentIndex;\n    this.distanceToParent = distanceToParent;\n    this.directives = directives;\n    this.nestedProtoView = nestedProtoView;\n    this.propertyBindings = propertyBindings;\n    this.variableBindings = variableBindings;\n    this.eventBindings = eventBindings;\n    this.textBindings = textBindings;\n    this.readAttributes = readAttributes;\n  }\n}\n\nexport class DirectiveBinder {\n  // Index into the array of directives in the Template instance\n  directiveIndex:any;\n  propertyBindings: Map<string, ASTWithSource>;\n  // Note: this contains a preprocessed AST\n  // that replaced the values that should be extracted from the element\n  // with a local name\n  eventBindings: Map<string, ASTWithSource>;\n  constructor({\n    directiveIndex, propertyBindings, eventBindings\n  }) {\n    this.directiveIndex = directiveIndex;\n    this.propertyBindings = propertyBindings;\n    this.eventBindings = eventBindings;\n  }\n}\n\nexport class ProtoView {\n  render: ProtoViewRef;\n  elementBinders:List<ElementBinder>;\n  variableBindings: Map<string, string>;\n\n  constructor({render, elementBinders, variableBindings}={}) {\n    this.render = render;\n    this.elementBinders = elementBinders;\n    this.variableBindings = variableBindings;\n  }\n}\n\nexport class DirectiveMetadata {\n  static get DECORATOR_TYPE() { return 0; }\n  static get COMPONENT_TYPE() { return 1; }\n  static get VIEWPORT_TYPE() { return 2; }\n  id:any;\n  selector:string;\n  compileChildren:boolean;\n  events:Map<string, string>;\n  bind:Map<string, string>;\n  setters:List<string>;\n  readAttributes:List<string>;\n  type:number;\n  constructor({id, selector, compileChildren, events, bind, setters, readAttributes, type}) {\n    this.id = id;\n    this.selector = selector;\n    this.compileChildren = isPresent(compileChildren) ? compileChildren : true;\n    this.events = events;\n    this.bind = bind;\n    this.setters = setters;\n    this.readAttributes = readAttributes;\n    this.type = type;\n  }\n}\n\n// An opaque reference to a ProtoView\nexport class ProtoViewRef {}\n\n// An opaque reference to a View\nexport class ViewRef {}\n\nexport class ViewContainerRef {\n  view:ViewRef;\n  elementIndex:number;\n  constructor(view:ViewRef, elementIndex: number) {\n    this.view = view;\n    this.elementIndex = elementIndex;\n  }\n}\n\nexport class Template {\n  componentId: string;\n  absUrl: string;\n  inline: string;\n  directives: List<DirectiveMetadata>;\n\n  constructor({componentId, absUrl, inline, directives}) {\n    this.componentId = componentId;\n    this.absUrl = absUrl;\n    this.inline = inline;\n    this.directives = directives;\n  }\n}\n\nexport class Renderer {\n  /**\n   * Compiles a single ProtoView. Non recursive so that\n   * we don't need to serialize all possible components over the wire,\n   * but only the needed ones based on previous calls.\n   */\n  compile(template:Template):Promise<ProtoView> { return null; }\n\n  /**\n   * Creates a new ProtoView with preset nested components,\n   * which will be instantiated when this protoView is instantiated.\n   * @param {List<ProtoViewRef>} protoViewRefs\n   *    ProtoView for every element with a component in this protoView or in a view container's protoView\n   * @return {List<ProtoViewRef>}\n   *    new ProtoViewRef for the given protoView and all of its view container's protoViews\n   */\n  mergeChildComponentProtoViews(protoViewRef:ProtoViewRef, protoViewRefs:List<ProtoViewRef>):List<ProtoViewRef> { return null; }\n\n  /**\n   * Creats a ProtoView that will create a root view for the given element,\n   * i.e. it will not clone the element but only attach other proto views to it.\n   */\n  createRootProtoView(selectorOrElement):ProtoViewRef { return null; }\n\n  /**\n   * Creates a view and all of its nested child components.\n   * @return {List<ViewRef>} depth first list of nested child components\n   */\n  createView(protoView:ProtoViewRef):List<ViewRef> { return null; }\n\n  /**\n   * Destroys a view and returns it back into the pool.\n   */\n  destroyView(view:ViewRef):void {}\n\n  /**\n   * Inserts a detached view into a viewContainer.\n   */\n  insertViewIntoContainer(vcRef:ViewContainerRef, view:ViewRef, atIndex):void {}\n\n  /**\n   * Detaches a view from a container so that it can be inserted later on\n   * Note: We are not return the ViewRef as this can't be done in sync,\n   * so we assume that the caller knows which view is in which spot...\n   */\n  detachViewFromContainer(vcRef:ViewContainerRef, atIndex:number):void {}\n\n  /**\n   * Sets a property on an element.\n   * Note: This will fail if the property was not mentioned previously as a propertySetter\n   * in the Template.\n   */\n  setElementProperty(view:ViewRef, elementIndex:number, propertyName:string, propertyValue:any):void {}\n\n  /**\n   * Installs a nested component in another view.\n   * Note: only allowed if there is a dynamic component directive\n   */\n  setDynamicComponentView(view:ViewRef, elementIndex:number, nestedViewRef:ViewRef):void {}\n\n  /**\n   * This will set the value for a text node.\n   * Note: This needs to be separate from setElementProperty as we don't have ElementBinders\n   * for text nodes in the ProtoView either.\n   */\n  setText(view:ViewRef, textNodeIndex:number, text:string):void {}\n\n  /**\n   * Sets the dispatcher for all events that have been defined in the template or in directives\n   * in the given view.\n   */\n  setEventDispatcher(viewRef:ViewRef, dispatcher:EventDispatcher):void {}\n\n  /**\n   * To be called at the end of the VmTurn so the API can buffer calls\n   */\n  flush():void {}\n}\n\n\n/**\n * A dispatcher for all events happening in a view.\n */\nexport class EventDispatcher {\n  /**\n   * Called when an event was triggered for a on-* attribute on an element.\n   * @param {List<any>} locals Locals to be used to evaluate the\n   *   event expressions\n   */\n  dispatchEvent(\n    elementIndex:number, eventName:string, locals:List<any>\n  ):void {}\n}\n"]}