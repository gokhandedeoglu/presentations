{"version":3,"sources":["element_binder.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,GAAE,CAAC,KAAO,4BAA0B,CAAC;AAC7C,KAAO,EAAC,QAAO,CAAC,KAAO,gCAA8B,CAAC;AACtD,KAAO,EAAC,SAAQ;AAAG,QAAM;AAAG,cAAY,CAAC,KAAO,2BAAyB,CAAC;AAC1E,KAAO,EAAC,IAAG;AAAG,YAAU,CAAC,KAAO,iCAA+B,CAAC;AAChE,UAAY,gBAAc,CAAA,IAAO,eAAa,CAAC;AAK/C,KAAO,MAAM,cAAY;AAWvB,YAAU,CAAE,CACV,eAAc;AACd,qBAAiB;AACjB,kBAAc;AACd,cAAU;AACV,cAAU;AACV,aAAS;AACT,cAAU;AACV,mBAAe;AACf,kBAAc,CAChB,CAAG;AACD,OAAG,gBAAgB,EAAI,gBAAc,CAAC;AACtC,OAAG,mBAAmB,EAAI,mBAAiB,CAAC;AAC5C,OAAG,gBAAgB,EAAI,gBAAc,CAAC;AACtC,OAAG,YAAY,EAAI,YAAU,CAAC;AAC9B,OAAG,YAAY,EAAI,YAAU,CAAC;AAC9B,OAAG,WAAW,EAAI,WAAS,CAAC;AAC5B,OAAG,YAAY,EAAI,YAAU,CAAC;AAC9B,OAAG,iBAAiB,EAAI,iBAAe,CAAC;AACxC,OAAG,gBAAgB,EAAI,gBAAc,CAAC;EACxC;AAAA,AAEA,8BAA4B,CAAE,UAAS,AAAgC,CAAG,CAAA,MAAK,AAAgC,CAAiB;AAC9H,AAAI,MAAA,CAAA,eAAc,CAAC;AACnB,OAAI,SAAQ,AAAC,CAAC,IAAG,YAAY,CAAC,CAAG;AAC/B,oBAAc,EAAI,CAAA,WAAU,SAAS,AAAC,CAAC,UAAS,CAAG,EAAA,CAAC,CAAC;IACvD,KAAO,KAAI,SAAQ,AAAC,CAAC,IAAG,gBAAgB,CAAC,CAAG;AAC1C,oBAAc,EAAI,CAAA,IAAG,gBAAgB,8BAA8B,AAAC,CAAC,UAAS,CAAG,OAAK,CAAC,CAAC;IAC1F;AAAA,AACA,SAAO,IAAI,cAAY,AAAC,CAAC;AACvB,gBAAU,CAAG,CAAA,IAAG,YAAY;AAC5B,oBAAc,CAAG,CAAA,IAAG,gBAAgB;AACpC,uBAAiB,CAAG,CAAA,IAAG,mBAAmB;AAC1C,oBAAc,CAAG,gBAAc;AAC/B,gBAAU,CAAG,CAAA,IAAG,YAAY;AAC5B,gBAAU,CAAG,CAAA,IAAG,YAAY;AAC5B,eAAS,CAAG,CAAA,IAAG,WAAW;AAC1B,qBAAe,CAAG,CAAA,IAAG,iBAAiB;AACtC,oBAAc,CAAG,CAAA,IAAG,gBAAgB;AAAA,IACtC,CAAC,CAAC;EACJ;AAAA,AACF;AAAA,AA7DA,KAAK,eAAe,AAAC,qEACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,MAAK,YAAuB,AA0Ce,CAAA,IAAG,CAAE,CAAA,eAAc,UAAU,CAAC,AA1C1B,IAA/C,MAAK,YAAuB,AA0CuD,CAAA,IAAG,CAAE,CAAA,eAAc,UAAU,CAAC,AA1ClE,GACE;EAAC,CAAC,CAAC,CAAC;AA6DrD","file":"/home/korchev/github/angular/modules/angular2/src/render/dom/view/element_binder.js","sourcesContent":["import {AST} from 'angular2/change_detection';\nimport {SetterFn} from 'angular2/src/reflection/types';\nimport {isPresent, isBlank, BaseException} from 'angular2/src/facade/lang';\nimport {List, ListWrapper} from 'angular2/src/facade/collection';\nimport * as protoViewModule from './proto_view';\n\n/**\n * Note: Code that uses this class assumes that is immutable!\n */\nexport class ElementBinder {\n  contentTagSelector: string;\n  textNodeIndices: List<number>;\n  nestedProtoView: protoViewModule.ProtoView;\n  eventLocals: AST;\n  eventNames: List<string>;\n  componentId: string;\n  parentIndex:number;\n  distanceToParent:number;\n  propertySetters: Map<string, SetterFn>;\n\n  constructor({\n    textNodeIndices,\n    contentTagSelector,\n    nestedProtoView,\n    componentId,\n    eventLocals,\n    eventNames,\n    parentIndex,\n    distanceToParent,\n    propertySetters\n  }) {\n    this.textNodeIndices = textNodeIndices;\n    this.contentTagSelector = contentTagSelector;\n    this.nestedProtoView = nestedProtoView;\n    this.componentId = componentId;\n    this.eventLocals = eventLocals;\n    this.eventNames = eventNames;\n    this.parentIndex = parentIndex;\n    this.distanceToParent = distanceToParent;\n    this.propertySetters = propertySetters;\n  }\n\n  mergeChildComponentProtoViews(protoViews:List<protoViewModule.ProtoView>, target:List<protoViewModule.ProtoView>):ElementBinder {\n    var nestedProtoView;\n    if (isPresent(this.componentId)) {\n      nestedProtoView = ListWrapper.removeAt(protoViews, 0);\n    } else if (isPresent(this.nestedProtoView)) {\n      nestedProtoView = this.nestedProtoView.mergeChildComponentProtoViews(protoViews, target);\n    }\n    return new ElementBinder({\n      parentIndex: this.parentIndex,\n      textNodeIndices: this.textNodeIndices,\n      contentTagSelector: this.contentTagSelector,\n      nestedProtoView: nestedProtoView,\n      componentId: this.componentId,\n      eventLocals: this.eventLocals,\n      eventNames: this.eventNames,\n      distanceToParent: this.distanceToParent,\n      propertySetters: this.propertySetters\n    });\n  }\n}\n"]}