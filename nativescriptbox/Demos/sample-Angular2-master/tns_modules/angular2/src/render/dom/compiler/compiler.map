{"version":3,"sources":["compiler.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,cAAa;AAAG,QAAM,CAAC,KAAO,4BAA0B,CAAC;AACjE,KAAO,EAAC,aAAY,CAAC,KAAO,2BAAyB,CAAC;AAEtD,KAAO,EAAC,QAAO;AAAG,UAAQ,CAAC,KAAO,YAAU,CAAC;AAC7C,KAAO,EAAC,eAAc,CAAC,KAAO,qBAAmB,CAAC;AAClD,KAAO,EAAC,cAAa,CAAC,KAAO,mDAAiD,CAAC;AAC/E,KAAO,EAAC,kBAAiB,CAAC,KAAO,yBAAuB,CAAC;AAOzD,KAAO,MAAM,SAAO;AAIlB,YAAU,CAAE,WAAU,AAAoB,CAAG,CAAA,cAAa,AAAgB,CAAG;AAC3E,OAAG,gBAAgB,EAAI,eAAa,CAAC;AACrC,OAAG,aAAa,EAAI,YAAU,CAAC;EACjC;AAAA,AAEA,QAAM,CAAE,QAAO,AAAU,CAAsB;AAC7C,AAAI,MAAA,CAAA,UAAS,EAAI,CAAA,IAAG,gBAAgB,KAAK,AAAC,CAAC,QAAO,CAAC,CAAC;AACpD,SAAO,CAAA,cAAa,KAAK,AAAC,CAAC,UAAS,CAClC,EAAC,EAAC,IAAM,CAAA,IAAG,iBAAiB,AAAC,CAAC,QAAO,CAAG,GAAC,CAAC,CAC1C,EAAC,CAAA,IAAM;AAAE,UAAM,IAAI,cAAY,AAAC,CAAC,gCAAgC,QAAO,YAAY,GAAG,CAAC,CAAC;IAAE,CAC7F,CAAC;EACH;AAAA,AAEA,iBAAe,CAAE,QAAO,AAAU,CAAG,CAAA,UAAS,CAAsB;AAClE,AAAI,MAAA,CAAA,eAAc,EAAI,GAAC,CAAC;AACxB,AAAI,MAAA,CAAA,QAAO,EAAI,IAAI,gBAAc,AAAC,CAAC,IAAG,aAAa,YAAY,AAAC,CAAC,QAAO,CAAG,gBAAc,CAAC,CAAC,CAAC;AAC5F,AAAI,MAAA,CAAA,eAAc,CAAC;AAEnB,kBAAc,EAAI,CAAA,QAAO,QAAQ,AAAC,CAAC,UAAS,CAAG,CAAA,QAAO,YAAY,CAAC,CAAC;AAEpE,AAAI,MAAA,CAAA,SAAQ,EAAI,CAAA,eAAc,CAAE,CAAA,CAAC,mBAAmB,MAAM,AAAC,EAAC,CAAC;AAE7D,OAAI,eAAc,OAAO,EAAI,EAAA,CAAG;AAC9B,WAAO,CAAA,cAAa,IAAI,AAAC,CAAC,eAAc,CAAC,KAAK,AAAC,CAAC,CAAC,CAAA,IAAM,UAAQ,CAAC,CAAC;IACnE,KAAO;AACL,WAAO,CAAA,cAAa,QAAQ,AAAC,CAAC,SAAQ,CAAC,CAAC;IAC1C;AAAA,EACF;AAAA,AACF;AAAA,AA7CA,KAAK,eAAe,AAAC,wBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAgBC,kBAAiB,IAAmB,cAAa,GAhB3B;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,0CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAqBN,QAAO,GArBsB;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,mDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YA6BG,QAAO,OA7Ba;EAAC,CAAC,CAAC,CAAC;AA4CrD","file":"/home/korchev/github/angular/modules/angular2/src/render/dom/compiler/compiler.js","sourcesContent":["import {PromiseWrapper, Promise} from 'angular2/src/facade/async';\nimport {BaseException} from 'angular2/src/facade/lang';\n\nimport {Template, ProtoView} from '../../api';\nimport {CompilePipeline} from './compile_pipeline';\nimport {TemplateLoader} from 'angular2/src/render/dom/compiler/template_loader';\nimport {CompileStepFactory} from './compile_step_factory';\n\n/**\n * The compiler loads and translates the html templates of components into\n * nested ProtoViews. To decompose its functionality it uses\n * the CompilePipeline and the CompileSteps.\n */\nexport class Compiler {\n  _templateLoader: TemplateLoader;\n  _stepFactory: CompileStepFactory;\n\n  constructor(stepFactory: CompileStepFactory, templateLoader: TemplateLoader) {\n    this._templateLoader = templateLoader;\n    this._stepFactory = stepFactory;\n  }\n\n  compile(template: Template):Promise<ProtoView> {\n    var tplPromise = this._templateLoader.load(template);\n    return PromiseWrapper.then(tplPromise,\n      (el) => this._compileTemplate(template, el),\n      (_) => { throw new BaseException(`Failed to load the template \"${template.componentId}\"`); }\n    );\n  }\n\n  _compileTemplate(template: Template, tplElement):Promise<ProtoView> {\n    var subTaskPromises = [];\n    var pipeline = new CompilePipeline(this._stepFactory.createSteps(template, subTaskPromises));\n    var compileElements;\n\n    compileElements = pipeline.process(tplElement, template.componentId);\n\n    var protoView = compileElements[0].inheritedProtoView.build();\n\n    if (subTaskPromises.length > 0) {\n      return PromiseWrapper.all(subTaskPromises).then((_) => protoView);\n    } else {\n      return PromiseWrapper.resolve(protoView);\n    }\n  }\n}"]}