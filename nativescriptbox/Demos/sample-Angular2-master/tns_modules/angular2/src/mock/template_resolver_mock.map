{"version":3,"sources":["template_resolver_mock.js"],"names":[],"mappings":"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","file":"/home/korchev/github/angular/modules/angular2/src/mock/template_resolver_mock.js","sourcesContent":["import {Map, MapWrapper, ListWrapper} from 'angular2/src/facade/collection';\nimport {Type, isPresent, BaseException, stringify, isBlank} from 'angular2/src/facade/lang';\n\nimport {Template} from 'angular2/src/core/annotations/template';\nimport {TemplateResolver} from 'angular2/src/core/compiler/template_resolver';\n\nexport class MockTemplateResolver extends TemplateResolver {\n  _templates: Map<Type, Template>;\n  _inlineTemplates: Map<Type, string>;\n  _templateCache: Map<Type, Template>;\n  _directiveOverrides: Map<Type, Type>;\n\n  constructor() {\n    super();\n    this._templates = MapWrapper.create();\n    this._inlineTemplates = MapWrapper.create();\n    this._templateCache = MapWrapper.create();\n    this._directiveOverrides = MapWrapper.create();\n  }\n\n  /**\n   * Overrides the [Template] for a component.\n   *\n   * @param {Type} component\n   * @param {Template} template\n   */\n  setTemplate(component: Type, template: Template): void {\n    this._checkOverrideable(component);\n    MapWrapper.set(this._templates, component, template);\n  }\n\n  /**\n   * Overrides the inline template for a component - other configuration remains unchanged.\n   *\n   * @param {Type} component\n   * @param {string} template\n   */\n  setInlineTemplate(component: Type, template: string): void {\n    this._checkOverrideable(component);\n    MapWrapper.set(this._inlineTemplates, component, template);\n  }\n\n  /**\n   * Overrides a directive from the component [Template].\n   *\n   * @param {Type} component\n   * @param {Type} from\n   * @param {Type} to\n   */\n  overrideTemplateDirective(component: Type, from: Type, to: Type): void {\n    this._checkOverrideable(component);\n\n    var overrides = MapWrapper.get(this._directiveOverrides, component);\n\n    if (isBlank(overrides)) {\n      overrides = MapWrapper.create();\n      MapWrapper.set(this._directiveOverrides, component, overrides);\n    }\n\n    MapWrapper.set(overrides, from, to);\n  }\n\n  /**\n   * Returns the [Template] for a component:\n   * - Set the [Template] to the overridden template when it exists or fallback to the default\n   *   [TemplateResolver], see [setTemplate]\n   * - Override the directives, see [overrideTemplateDirective]\n   * - Override the template definition, see [setInlineTemplate]\n   *\n   * @param component\n   * @returns {Template}\n   */\n  resolve(component: Type): Template {\n    var template = MapWrapper.get(this._templateCache, component);\n    if (isPresent(template)) return template;\n\n    template = MapWrapper.get(this._templates, component);\n    if (isBlank(template)) {\n      template = super.resolve(component);\n    }\n\n    var directives = template.directives;\n    var overrides = MapWrapper.get(this._directiveOverrides, component);\n\n    if (isPresent(overrides) && isPresent(directives)) {\n      directives = ListWrapper.clone(template.directives);\n      MapWrapper.forEach(overrides, (to, from) => {\n        var srcIndex = directives.indexOf(from);\n        if (srcIndex == -1) {\n          throw new BaseException(`Overriden directive ${stringify(from)} not found in the template of ${stringify(component)}`);\n        }\n        directives[srcIndex] = to;\n      });\n      template = new Template({\n        inline: template.inline,\n        url: template.url,\n        directives: directives,\n        formatters: template.formatters,\n        source: template.source,\n        locale: template.locale,\n        device: template.device,\n      });\n    }\n\n    var inlineTemplate = MapWrapper.get(this._inlineTemplates, component);\n    if (isPresent(inlineTemplate)) {\n      template = new Template({\n        inline: inlineTemplate,\n        url: null,\n        directives: template.directives,\n        formatters: template.formatters,\n        source: template.source,\n        locale: template.locale,\n        device: template.device,\n      });\n    }\n\n    MapWrapper.set(this._templateCache, component, template);\n    return template;\n  }\n\n  /**\n   * Once a component has been compiled, the ProtoView is stored in the compiler cache.\n   *\n   * Then it should not be possible to override the component configuration after the component\n   * has been compiled.\n   *\n   * @param {Type} component\n   */\n  _checkOverrideable(component: Type): void {\n    var cached = MapWrapper.get(this._templateCache, component);\n\n    if (isPresent(cached)) {\n      throw new BaseException(`The component ${stringify(component)} has already been compiled, its configuration can not be changed`);\n    }\n  }\n}\n"]}