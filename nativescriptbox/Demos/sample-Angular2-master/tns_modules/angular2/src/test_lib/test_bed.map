{"version":3,"sources":["test_bed.js"],"names":[],"mappings":"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","file":"/home/korchev/github/angular/modules/angular2/src/test_lib/test_bed.js","sourcesContent":["import {Injector} from 'angular2/di';\n\nimport {Type, isPresent, BaseException} from 'angular2/src/facade/lang';\nimport {Promise} from 'angular2/src/facade/async';\nimport {isBlank} from 'angular2/src/facade/lang';\nimport {List} from 'angular2/src/facade/collection';\n\nimport {Template} from 'angular2/src/core/annotations/template';\n\nimport {TemplateResolver} from 'angular2/src/core/compiler/template_resolver';\nimport {Compiler} from 'angular2/src/core/compiler/compiler';\nimport {View} from 'angular2/src/core/compiler/view';\n\nimport {EventManager} from 'angular2/src/render/dom/events/event_manager';\n\nimport {queryView} from './utils';\nimport {instantiateType, getTypeOf} from './lang_utils';\n\nexport class TestBed {\n  _injector: Injector;\n\n  constructor(injector: Injector) {\n    this._injector = injector;\n  }\n\n  /**\n   * Overrides the [Template] of a [Component].\n   *\n   * @see setInlineTemplate() to only override the html\n   *\n   * @param {Type} component\n   * @param {Template} template\n   */\n  overrideTemplate(component: Type, template: Template): void {\n    this._injector.get(TemplateResolver).setTemplate(component, template);\n  }\n\n  /**\n   * Overrides only the html of a [Component].\n   * All the other propoerties of the component's [Template] are preserved.\n   *\n   * @param {Type} component\n   * @param {string} html\n   */\n  setInlineTemplate(component: Type, html: string): void {\n    this._injector.get(TemplateResolver).setInlineTemplate(component, html);\n  }\n\n  /**\n   * Overrides the directives from the component [Template].\n   *\n   * @param {Type} component\n   * @param {Type} from\n   * @param {Type} to\n   */\n  overrideDirective(component: Type, from: Type, to: Type): void {\n    this._injector.get(TemplateResolver).overrideTemplateDirective(component, from, to);\n  }\n\n  /**\n   * Creates a [View] for the given component.\n   *\n   * Only either a component or a context needs to be specified but both can be provided for\n   * advanced use cases (ie subclassing the context).\n   *\n   * @param {Type} component\n   * @param {*} context\n   * @param {string} html Use as the component template when specified (shortcut for setInlineTemplate)\n   * @return {Promise<ViewProxy>}\n   */\n  createView(component: Type,\n             {context = null, html = null}: {context:any, html: string} = {}): Promise<View> {\n\n    if (isBlank(component) && isBlank(context)) {\n      throw new BaseException('You must specified at least a component or a context');\n    }\n\n    if (isBlank(component)) {\n      component = getTypeOf(context);\n    } else if (isBlank(context)) {\n      context = instantiateType(component);\n    }\n\n    if (isPresent(html)) {\n      this.setInlineTemplate(component, html);\n    }\n\n    return this._injector.get(Compiler).compile(component).then((pv) => {\n      var eventManager = this._injector.get(EventManager);\n      var view = pv.instantiate(null, eventManager);\n      view.hydrate(this._injector, null, null, context, null);\n      return new ViewProxy(view);\n    });\n  }\n}\n\n/**\n * Proxy to [View] return by [TestBed.createView] which offers a high level API for tests.\n */\nexport class ViewProxy {\n  _view: View;\n\n  constructor(view: View) {\n    this._view = view;\n  }\n\n  get context(): any {\n    return this._view.context;\n  }\n\n  get nodes(): List {\n    return this._view.nodes;\n  }\n\n  detectChanges(): void {\n    this._view.changeDetector.detectChanges();\n  }\n\n  querySelector(selector) {\n    return queryView(this._view, selector);\n  }\n\n  /**\n   * @returns {View} return the underlying [View].\n   *\n   * Prefer using the other methods which hide implementation details.\n   */\n  get rawView(): View {\n    return this._view;\n  }\n}\n"]}